{"version":3,"sources":["components/SimpleAuditCheck.js","App.js","serviceWorker.js","index.js"],"names":["SimpleAuditCheck","props","handleCashInChange","event","Number","target","value","setState","cashIn","handleBonusChange","bonus","handleWinLoseChange","winLose","handleOutstandingChange","outstanding","handleCashOutChange","cashOut","handleSubmit","preventDefault","state","auditNumber","auditCheck","toFixed","result","textColor","error","this","className","type","onChange","placeholder","rowSpan","style","color","colspan","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.294a5a6f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass SimpleAuditCheck extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            cashIn:\"\",\r\n            bonus:\"\",\r\n            winLose:\"\",\r\n            outstanding:\"\",\r\n            cashOut:\"\",\r\n            auditCheck:\"\",\r\n            result: \"\",\r\n            textColor: 'gray',\r\n            error:\"\"\r\n        }\r\n    }\r\n\r\n    handleCashInChange = (event) => {\r\n        var inputNumber = Number(event.target.value)\r\n\r\n        this.setState({\r\n            cashIn: event.target.value\r\n        })\r\n    }\r\n\r\n    handleBonusChange = (event) => {\r\n        this.setState({\r\n            bonus: event.target.value\r\n        })\r\n    }\r\n\r\n    handleWinLoseChange = (event) => {\r\n        this.setState({\r\n            winLose: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOutstandingChange = (event) => {\r\n        this.setState({\r\n            outstanding: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCashOutChange = (event) => {\r\n        this.setState({\r\n            cashOut: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        var { cashIn, bonus, winLose, outstanding, cashOut } = this.state\r\n        var auditNumber = Number(cashIn) + Number(bonus) + Number(winLose) - Number(outstanding) - Number(cashOut)\r\n        this.setState({\r\n            auditCheck: auditNumber.toFixed(2)\r\n        })\r\n\r\n        if (auditNumber === 0) {\r\n            this.setState({\r\n                result: \"Valid\",\r\n                textColor:\"green\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                result: \"Error\",\r\n                textColor:\"red\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { auditCheck, cashIn, bonus, winLose, outstanding, cashOut, result } = this.state\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"col-xs-12\">\r\n                    <table className=\"table-bordered\">\r\n                        <tr>\r\n                            <td>\r\n                                Cash In Balance After:\r\n                        </td>\r\n                            <td>\r\n                                <input type=\"number\" value={cashIn} onChange={this.handleCashInChange} placeholder=\"0\"/>\r\n                            </td>\r\n                            <td rowSpan=\"7\">\r\n                                <h3 className=\"p-2\" style={{color:this.state.textColor}}>{result}</h3>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Bonus:\r\n                        </td>\r\n                            <td>\r\n                                <input type=\"number\" value={bonus} onChange={this.handleBonusChange} placeholder=\"0\"/>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Win/Loss Amount:\r\n                        </td>\r\n                            <td>\r\n                                <input type=\"number\" value={winLose} onChange={this.handleWinLoseChange} placeholder=\"0\"/>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Outstanding Amount:\r\n                        </td>\r\n                            <td>\r\n                                <input type=\"number\" value={outstanding} onChange={this.handleOutstandingChange} placeholder=\"0\"/>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Cash Out Balance Before(Now Balance):\r\n                        </td>\r\n                            <td>\r\n                                <input type=\"number\" value={cashOut} onChange={this.handleCashOutChange} placeholder=\"0\"/>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Audit Check:\r\n                            </td>\r\n                            <td className=\"text-right\">\r\n                                {auditCheck}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colspan=\"2\"><button className=\"btn btn-primary btn-block\" onClick={this.handleSubmit}>Submit</button></td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default SimpleAuditCheck\r\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport SimpleAuditCheck from './components/SimpleAuditCheck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App\" className=\"container-fluid\">\n      <div className=\"col-xs-12\"><h1>Audit Check</h1></div>\n        <SimpleAuditCheck/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}