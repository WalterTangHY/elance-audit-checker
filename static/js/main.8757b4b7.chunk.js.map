{"version":3,"sources":["components/SimpleAuditCheck2.js","components/SimpleAuditCheck.js","App.js","serviceWorker.js","index.js"],"names":["SimpleAuditCheck","Component","props","handleCashInChange","event","Number","target","value","setState","cashIn","handleBonusChange","bonus","handleWinLoseChange","winLose","handleOutstandingChange","outstanding","handleCashOutChange","cashOut","handleSubmit","preventDefault","state","validAmount","valid_amount","auditNumber","auditCheck","toFixed","result","textColor","tableColor","error","this","className","style","color","colSpan","type","onChange","placeholder","onClick","App","SimpleAuditCheck2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8757b4b7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass SimpleAuditCheck extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            cashIn: \"\",\r\n            bonus: \"\",\r\n            winLose: \"\",\r\n            outstanding: \"\",\r\n            cashOut: \"\",\r\n            auditCheck: 0.00,\r\n            result: \"\",\r\n            textColor: 'gray',\r\n            tableColor: '',\r\n            error: \"\",\r\n            validAmount: 0.00\r\n        }\r\n    }\r\n\r\n\r\n    handleCashInChange = (event) => {\r\n        var inputNumber = Number(event.target.value)\r\n        this.setState({\r\n            cashIn: event.target.value\r\n        })\r\n    }\r\n\r\n    handleBonusChange = (event) => {\r\n        this.setState({\r\n            bonus: event.target.value\r\n        })\r\n    }\r\n\r\n    handleWinLoseChange = (event) => {\r\n        this.setState({\r\n            winLose: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOutstandingChange = (event) => {\r\n        this.setState({\r\n            outstanding: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCashOutChange = (event) => {\r\n        this.setState({\r\n            cashOut: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        var { validAmount, cashIn, bonus, winLose, outstanding, cashOut } = this.state\r\n        var valid_amount = Number(cashIn) + Number(bonus) + Number(winLose) - Number(outstanding)\r\n        var auditNumber = valid_amount - Number(cashOut)\r\n        this.setState({\r\n            auditCheck: auditNumber.toFixed(2),\r\n            validAmount: valid_amount.toFixed(2)\r\n        })\r\n\r\n        if (auditNumber >= 0) {\r\n            this.setState({\r\n                result: \"Valid\",\r\n                textColor: \"green\",\r\n                tableColor: 'table-success'\r\n            })\r\n        } else {\r\n            this.setState({\r\n                result: \"Error\",\r\n                textColor: \"red\",\r\n                tableColor: 'table-danger'\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { tableColor, textColor, validAmount, auditCheck, cashIn, bonus, winLose, outstanding, cashOut, result } = this.state\r\n\r\n        return (\r\n            <div className=\"col-lg-9\">\r\n                <div>\r\n                    <h1>Audit Check: <span style={{ color: textColor }}>{result}</span></h1>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8 col-md-8 col-lg-6\">\r\n\r\n                        <table className=\"\">                       \r\n                            <tr>\r\n                                <th colSpan=\"3\">Current Amount:</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n                                <td className=\"text-right\">Now Balance:</td>\r\n                                <td><input type=\"number\" value={cashOut} onChange={this.handleCashOutChange} placeholder=\"0\" /></td>\r\n                            </tr>\r\n                            <tr className=\"text-right\">\r\n                                \r\n                            </tr>\r\n                            <tr>\r\n                                <th colSpan=\"2\">Expected Amount:</th>\r\n                                <td className=\"text-right\" colSpan=\"1\"><span className=\"text-success font-weight-bold\">${validAmount}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td className=\"text-right\">Cash In Balance After:</td>\r\n                                <td><input type=\"number\" value={cashIn} onChange={this.handleCashInChange} placeholder=\"0\" /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td className=\"text-right\">Bonus:</td>\r\n                                <td><input type=\"number\" value={bonus} onChange={this.handleBonusChange} placeholder=\"0\" /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td className=\"text-right\">Win/Loss Amount:</td>\r\n                                <td><input type=\"number\" value={winLose} onChange={this.handleWinLoseChange} placeholder=\"0\" /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td className=\"text-right\">Outstanding Amount:</td>\r\n                                <td><input type=\"number\" value={outstanding} onChange={this.handleOutstandingChange} placeholder=\"0\" /></td>\r\n                            </tr>\r\n                            <tr className={tableColor}>\r\n                                <td colSpan=\"2\" className=\"text-right font-weight-bold\">\r\n                                    Audit Amount:\r\n                                </td>\r\n                                <td className=\"text-right\" >\r\n                                    <span className=\"font-weight-bold\" style={{ color: `${textColor}` }}>{auditCheck}</span>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"3\"><button className=\"btn btn-primary btn-block\" onClick={this.handleSubmit}>Submit</button></td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"col-sm-6 col-md-3 col-lg-3\">\r\n                    </div>\r\n                    <div className=\"col-md-3 col-lg-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 col-lg-5\">\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SimpleAuditCheck\r\n","import React, { Component } from 'react'\r\n\r\nclass SimpleAuditCheck extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            cashIn: \"\",\r\n            bonus: \"\",\r\n            winLose: \"\",\r\n            outstanding: \"\",\r\n            cashOut: \"\",\r\n            auditCheck: 0,\r\n            result: \"\",\r\n            textColor: 'gray',\r\n            error: \"\",\r\n            validAmount: 0,\r\n            nowBalance:\"\"\r\n        }\r\n    }\r\n\r\n\r\n    handleCashInChange = (event) => {\r\n        var inputNumber = Number(event.target.value)\r\n        this.setState({\r\n            cashIn: event.target.value\r\n        })\r\n    }\r\n\r\n    handleBonusChange = (event) => {\r\n        this.setState({\r\n            bonus: event.target.value\r\n        })\r\n    }\r\n\r\n    handleWinLoseChange = (event) => {\r\n        this.setState({\r\n            winLose: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOutstandingChange = (event) => {\r\n        this.setState({\r\n            outstanding: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCashOutChange = (event) => {\r\n        this.setState({\r\n            cashOut: event.target.value\r\n        })\r\n    }\r\n\r\n    handleNowBalanceChange = (event) => {\r\n        this.setState({\r\n            nowBalance: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        var { cashIn, bonus, winLose, outstanding, cashOut, nowBalance } = this.state\r\n        var valid_amount = Number(cashIn) + Number(bonus) + Number(winLose) - Number(outstanding) - Number(cashOut)\r\n        var auditNumber = valid_amount - Number(nowBalance)\r\n        this.setState({\r\n            auditCheck: auditNumber.toFixed(2),\r\n            validAmount: valid_amount.toFixed(2)\r\n        })\r\n\r\n        if (auditNumber === 0) {\r\n            this.setState({\r\n                result: \"Valid\",\r\n                textColor: \"green\"\r\n            })\r\n        } else if(auditNumber<0){\r\n            this.setState({\r\n                result: \"Invalid\",\r\n                textColor: \"red\"\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                result: \"Excess\",\r\n                textColor: \"Orange\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { nowBalance,textColor, validAmount, auditCheck, cashIn, bonus, winLose, outstanding, cashOut, result } = this.state\r\n\r\n        return (\r\n            <div className=\"col-xs-12\">\r\n                <h1>Audit Check</h1>\r\n                <table className=\"table-bordered\" onMouseEnter>\r\n                    <tr>\r\n                        <th colspan=\"2\">\r\n                            Expected Amount\r\n                        </th>\r\n                        <th>\r\n                            Current Balance\r\n                        </th>\r\n                    </tr>\r\n                    <tr>\r\n\r\n                        <td>\r\n                            Cash In Balance After:\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"number\" value={cashIn} onChange={this.handleCashInChange} placeholder=\"0\" />\r\n                        </td>\r\n                        <td rowSpan=\"5\" className=\"text-center\">\r\n                            Now Balance:<br />\r\n                            <input className=\"text-center\" type=\"number\" value={nowBalance} onChange={this.handleNowBalanceChange} placeholder=\"0\" />\r\n                        </td>\r\n                        <td rowSpan=\"6\">\r\n                            <h3 className=\"p-2\" style={{ color: this.state.textColor }}>{result}</h3>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Bonus:\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"number\" value={bonus} onChange={this.handleBonusChange} placeholder=\"0\" />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Win/Loss Amount:\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"number\" value={winLose} onChange={this.handleWinLoseChange} placeholder=\"0\" />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Outstanding Amount:\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"number\" value={outstanding} onChange={this.handleOutstandingChange} placeholder=\"0\" />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Cash Out Amount:\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"number\" value={cashOut} onChange={this.handleCashOutChange} placeholder=\"0\" />\r\n                        </td>\r\n                    </tr>\r\n                    <tr className=\"text-right font-weight-bold\">\r\n                        <td>\r\n                            Valid Amount:\r\n                        </td>\r\n                        <td className=\"text-success\">\r\n                            {validAmount}\r\n                        </td>\r\n                    </tr>\r\n                    <tr className=\"text-right font-weight-bold\">\r\n                        <td colspan=\"3\">\r\n                            Audit Check:\r\n                            <span style={{ color: `${textColor}` }}>{auditCheck}</span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colspan=\"3\"><button className=\"btn btn-primary btn-block\" onClick={this.handleSubmit}>Submit</button></td>\r\n                    </tr>\r\n                </table>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SimpleAuditCheck\r\n","import React from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\nimport SimpleAuditCheck from './components/SimpleAuditCheck';\r\nimport SimpleAuditCheck2 from './components/SimpleAuditCheck2';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container-fluid\">\r\n        <SimpleAuditCheck2/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}